#ifndef ChecksumComputer_h__
#define ChecksumComputer_h__

#include "GreisTypes.h"

namespace Greis
{
    class ChecksumComputer
    {
    private:
        // 8-bit checksum
        enum 
        {
            bits = 8,
            lShift = 2,
            rShift = bits - lShift
        };

        static inline Types::u1 ROT_LEFT(Types::u1 val) { return ((val << lShift) | (val >> rShift)); }
        //static inline Types::u1 ROT_LEFT(Types::u1 val) { return val; }
    public:
        static Types::u1 ComputeCs8(void const* source, int count, Types::u1 initVal = 0);

        // 16-bit CRC
        typedef unsigned short Crc16;
    private:
        // Table (generated by 'crc16init()')
        static Crc16* table();

        // Initializes the table. Should be called once before the first
        // call to 'crc16()'
        static void crc16init(Crc16* table);
    public:
        // Calculates CRC16 of 'cnt' bytes from 'src' and returns result.
        // Initial value of CRC16 is supplied by caller in 'crc'.
        static Crc16 ComputeCrc16(void const* src, int cnt, Crc16 crc = 0);
    };
}

#endif // ChecksumComputer_h__